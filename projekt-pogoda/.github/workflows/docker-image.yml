name: Build & Push Docker Image (multiarch, CVE, cache)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/NaPewnoNieMefs/pogoda-app
  CACHE_REPO: nikodemxppp/pogoda-app-cache

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up QEMU for multiarch
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (for cache)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Restore cache from DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          load: false
          push: false
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}
          cache-to: type=registry,ref=${{ env.CACHE_REPO }},mode=max
          platforms: linux/amd64,linux/arm64
          outputs: type=docker,dest=/tmp/image.tar

      - name: Build and push image (multiarch, cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}
          cache-to: type=registry,ref=${{ env.CACHE_REPO }},mode=max

      - name: Export image to tar (for scanning)
        run: |
          docker buildx imagetools create ${{ env.IMAGE_NAME }}:latest
          docker save ${{ env.IMAGE_NAME }}:latest -o image.tar

      - name: Scan image with Trivy (CVE check)
        uses: aquasecurity/trivy-action@master
        with:
          input: image.tar
          exit-code: 1
          severity: CRITICAL,HIGH

      - name: Push image to GitHub Container Registry (if scan passed)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}
          cache-to: type=registry,ref=${{ env.CACHE_REPO }},mode=max
